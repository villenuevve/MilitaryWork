import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from ultralytics import YOLO

# 1. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
DATA_DIR = '/Users/vlodochka1/Desktop/MilitaryDetect.v1i.yolov8-obb'
PLOTS_DIR = 'plots'
os.makedirs(PLOTS_DIR, exist_ok=True)

TRAIN_DIR = os.path.join(DATA_DIR, 'train', 'images')
VAL_DIR = os.path.join(DATA_DIR, 'valid', 'images')
TEST_DIR = os.path.join(DATA_DIR, 'test', 'images')

CONFIG_FILE = 'obb_config.yaml'
MODEL_NAME = 'military_detect_best.pt'

EPOCHS = 10
IMG_SIZE = 640
BATCH_SIZE = 32

# 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–æ–∫ —ñ –¥–∞–Ω–∏—Ö
for dir_path in [TRAIN_DIR, VAL_DIR, TEST_DIR]:
    if not os.path.exists(dir_path):
        raise FileNotFoundError(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {dir_path}")
    else:
        print(f"‚úÖ –ü–∞–ø–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞: {dir_path} ({len(os.listdir(dir_path))} —Ñ–∞–π–ª—ñ–≤)")

# 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è YAML –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
data_yaml = f"""
path: {os.path.abspath(DATA_DIR)}
train: train/images
val: valid/images
test: test/images
nc: 5
names: ['helicopter', 'jet', 'sam', 'tank', 'truck']
"""
with open(CONFIG_FILE, 'w') as f:
    f.write(data_yaml)

print(f"üìÑ YAML —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {CONFIG_FILE}")

# 4. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ YOLOv8 OBB
model = YOLO('app/models/military_detect_best.pt')

results = model.train(
    data=CONFIG_FILE,
    imgsz=IMG_SIZE,
    epochs=EPOCHS,
    batch=BATCH_SIZE,
    patience=10,
    workers=4,
    optimizer='SGD',
    lr0=0.001,  
    cos_lr=True,
    verbose=True
)
# 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –≤—Ç—Ä–∞—Ç
history = {
    'train_loss': results.metrics.box_loss,
    'val_loss': results.metrics.val_box_loss,
    'precision': results.metrics.precision,
    'recall': results.metrics.recall,
    'map50': results.metrics.map50,
    'map50_95': results.metrics.map
}

history_df = pd.DataFrame([history])
history_df.to_csv(os.path.join(PLOTS_DIR, 'training_history.csv'), index=False)
print("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –Ω–∞–≤—á–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É training_history.csv")

# 6. –ì—Ä–∞—Ñ—ñ–∫ –≤—Ç—Ä–∞—Ç
plt.figure(figsize=(10,6))
if hasattr(results, 'losses') and 'box' in results.losses:
    plt.plot(results.losses['box'], label='train_box_loss')
else:
    print("‚ö†Ô∏è Warning: –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å losses['box'] –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—É.")

plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training Box Loss Curve')
plt.legend()
plt.grid(True)
plt.savefig(os.path.join(PLOTS_DIR, 'box_loss_curve.png'))
plt.close()
print("‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –≤—Ç—Ä–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É box_loss_curve.png")

# 7. –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
results_dir = model.save_dir
metrics_path = os.path.join(results_dir, 'results.png')
if os.path.exists(metrics_path):
    img = plt.imread(metrics_path)
    plt.figure(figsize=(12,8))
    plt.imshow(img)
    plt.axis('off')
    plt.title('Training Results')
    plt.show()
else:
    print("‚ö†Ô∏è Warning: results.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó.")

print("üéØ –ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
